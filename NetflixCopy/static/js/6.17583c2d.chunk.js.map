{"version":3,"sources":["components/Card.js","components/Pagination.js","Pages/TvPage.js"],"names":["Card","src","title","titleId","type","score","setType","clickHandler","date","to","className","onClick","toElementScroll","smallImgPath","unavailable","alt","substr","Pagination","props","setCurrentPage","p","setSearchResults","searchText","setDiscoverData","discover","activeGenres","pages","i","Math","max","currentPage","min","pagesCount","push","toPrevPage","toNextPage","map","pageNum","compose","connect","state","tvData","tvGenres","tvActiveGenres","tvPage","details","titleType","setTypeActionCreator","setTvPageActionCreator","setActiveTvGenresAC","setGenresData","useEffect","string","document","genre","id","array","some","item","name","length","results","poster_path","vote_average","release_date","first_air_date","total_pages"],"mappings":"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","file":"static/js/6.17583c2d.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { smallImgPath, toElementScroll, unavailable } from '../global/config';\r\n\r\nconst Card = ({ src, title, titleId,type, setType, score, clickHandler, date }) => {\r\n\tconst onClickHandler =()=>{\r\n\t\tif(clickHandler){ \r\n\t\t\tclickHandler()\r\n\t\t}\r\n\t\ttoElementScroll(false)\r\n\t}\r\n\treturn (\r\n\t\t<Link to={`/title/${type}/${titleId}`} className=\"card\" \r\n\t\t\tonClick={onClickHandler}\r\n\t\t>\r\n\t\t\t<div className=\"card__img\">\r\n\t\t\t\t<img src={ src ? (smallImgPath + src): unavailable} alt=\"\" />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"card__name\">{title}</div>\r\n\t\t\t<div className=\"card__score\">\r\n\t\t\t\t{score}\r\n\t\t\t</div>\r\n\t\t\t{date && <div className=\"card__date\">{date.substr(0, 4)}</div>}\r\n\t\t</Link>\r\n\t);\r\n};\r\n\r\nexport default Card;","import { toElementScroll } from \"../global/config\";\r\n\r\nconst Pagination = (props) => {\r\n\tconst setCurrentPage = (p) => {\r\n\t\tprops.setCurrentPage(p)\r\n\t\tif( props.setSearchResults){\r\n\t\t\tprops.setSearchResults(props.searchText ,p)\r\n\t\t\t\r\n\t\t}\r\n        if(props.setDiscoverData){\r\n\t\t\tprops.setDiscoverData(props.discover, p, props.activeGenres)\r\n\t\t}\r\n\t\t// props.getItems(p, props.itemsCount)\r\n\t\t// document.querySelector('section').scrollIntoView({ \r\n\t\t// \tbehavior: 'smooth', \r\n\t\t// \tblock: 'start' \r\n\t\t// })\r\n\t\ttoElementScroll(true)\r\n\t}\r\n\t// const props.pagesCount = Math.ceil(props.totalItemsCount / props.itemsCount)\r\n\tconst pages = []\r\n\tfor (let i = Math.max(props.currentPage - 2, 2); i <= Math.max(1, Math.min(props.currentPage + 2, props.pagesCount - 1)); i++) {\r\n\t\tpages.push(i);\r\n\t}\r\n\tconst toPrevPage = () => {\r\n\t\tif (props.currentPage - 1 > 0) {\r\n\t\t\treturn props.currentPage - 1\r\n\t\t} else {\r\n\t\t\treturn 0\r\n\t\t}\r\n\t}\r\n\tconst toNextPage = () => {\r\n\t\tif (props.currentPage + 1 <= props.pagesCount) {\r\n\t\t\treturn props.currentPage + 1\r\n\t\t} else {\r\n\t\t\treturn props.pagesCount + 1\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\tprops.pagesCount>1 &&\r\n\t\t<ul className=\"pagination\">\r\n\t\t\t{/* <li><span className={toPrevPage() < 1 ? 'arrow is-disabled' : 'arrow'} onClick={() => setCurrentPage(toPrevPage())}>{'<'}</span></li>\r\n\t\t\t<li><span className={props.currentPage === 1 && 'is-active'} onClick={() => setCurrentPage(1)}>{1}</span></li>\r\n\t\t\t{pages.map(pageNum => <li key={pageNum}><span className=props.currentPage === pageNum? 'is-active':''} onClick={() => setCurrentPage(pageNum)}>{pageNum}</span></li>)}\r\n\t\t\t<li><span className={props.currentPage === props.pagesCount && 'is-active'} onClick={() => setCurrentPage(props.pagesCount)}>{props.pagesCount}</span></li>\r\n\t\t\t<li><span className={toNextPage() <= props.pagesCount ? 'arrow' : 'arrow is-disabled'} onClick={() => setCurrentPage(toNextPage())}>{'>'}</span></li> */}\r\n\t\t\t<li><span className={toPrevPage() < 1 ? 'arrow is-disabled' : 'arrow'}  onClick={() => setCurrentPage(toPrevPage())}>{''}</span></li>\r\n\t\t\t<li><span className={props.currentPage === 1 ? 'is-active': ''} onClick={() => setCurrentPage(1)}>{1}</span></li>\r\n\t\t\t{pages.map(pageNum => <li key={pageNum}><span className={props.currentPage === pageNum? 'is-active':''} onClick={() => setCurrentPage(pageNum)}>{pageNum}</span></li>)}\r\n\t\t\t<li><span className={props.currentPage === props.pagesCount ?  'is-active': ''} onClick={() => setCurrentPage(props.pagesCount)}>{props.pagesCount}</span></li>\r\n\t\t\t<li><span  className={toNextPage() <= props.pagesCount ? 'arrow' : 'arrow is-disabled'} onClick={() => setCurrentPage(toNextPage())}>{''}</span></li>\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nexport default Pagination;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n// import { withRouter } from 'react-router-native';\r\nimport { compose } from 'redux';\r\nimport Card from '../components/Card';\r\nimport { originalImgPath } from '../global/config';\r\nimport { setDiscoverData, setTvPageActionCreator, setActiveTvGenresAC, setGenresData} from \"../redux/discover-reducer\";\r\nimport {setTypeActionCreator } from \"../redux/details-reducer\";\r\nimport Pagination from '../components/Pagination';\r\nconst Tvpage = ({tvData, setDiscoverData, type, currentPage, setTvPageActionCreator, tvGenres, tvActiveGenres, setActiveTvGenresAC, setGenresData}) => {\r\n    \r\n    useEffect(()=>{\r\n        setDiscoverData('tv', currentPage, tvActiveGenres.string)\r\n    },[currentPage, tvActiveGenres])\r\n    useEffect(()=>{\r\n        document.title = 'Сериалы'\r\n        setGenresData('tv')\r\n    },[])\r\n    const setGenresHandler = (id)=>{\r\n        // console.log(id)\r\n        setActiveTvGenresAC(id)\r\n        // setDiscoverData('movie', currentPage, tvActiveGenres.string)\r\n        setTvPageActionCreator(1)\r\n    }\r\n    const setEmptyGenresHandler = ()=>{\r\n        setActiveTvGenresAC('')\r\n        setTvPageActionCreator(1)\r\n    }\r\n    return (\r\n        <section>\r\n            <div className=\"container-fluid\">\r\n                <h2 className=\"title\">Сериалы</h2>\r\n                {tvGenres && <ul className='genres-list'>{tvGenres.map(genre => { return <li key={genre.id} onClick={() => setGenresHandler(genre.id)} className={tvActiveGenres.array.some(item => item === genre.id) ? 'is-active' : ''}>{genre.name}</li> })}\r\n                    {tvActiveGenres.array.length>0 && <li onClick={setEmptyGenresHandler} className='genres-list__clear'>Очистить все</li>}\r\n                </ul>}\r\n                <div className=\"main-grid\">\r\n                    {tvData && tvData.results.map(item => { return <Card key={item.id} titleId={item.id} setType={setTypeActionCreator} type={'tv'} src={item.poster_path} title={item.title || item.name} score={item.vote_average} date={item.release_date || item.first_air_date} /> })}\r\n                </div>\r\n                {tvData && <Pagination currentPage={currentPage} pagesCount={tvData.total_pages} setDiscoverData={setDiscoverData} discover='tv' setCurrentPage={setTvPageActionCreator} activeGenres={tvActiveGenres.string} />}\r\n            </div>\r\n\r\n        </section>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state)=>{\r\n    return{\r\n        tvData: state.discover.tvData,\r\n        tvGenres: state.discover.tvGenres,\r\n        tvActiveGenres: state.discover.tvActiveGenres,\r\n        currentPage: state.discover.tvPage,\r\n        type: state.details.titleType,\r\n    }\r\n}\r\nexport default compose( \r\n    connect(mapStateToProps, {setDiscoverData, setTypeActionCreator, setTvPageActionCreator, setActiveTvGenresAC, setGenresData})\r\n)(Tvpage)"],"sourceRoot":""}