{"version":3,"sources":["components/Card.js","components/Pagination.js","Pages/ListPage.js"],"names":["Card","src","title","titleId","type","score","setType","clickHandler","date","to","className","onClick","toElementScroll","smallImgPath","unavailable","alt","substr","Pagination","props","setCurrentPage","p","setSearchResults","searchText","setDiscoverData","discover","activeGenres","pages","i","Math","max","currentPage","min","pagesCount","push","toPrevPage","toNextPage","map","pageNum","compose","connect","state","listDetails","lists","listPage","itemsToRemove","removeItemsMode","accessToken","auth","setListDetails","setItemsToRemoveAc","deleteItemsToRemoveAc","setRemoveItemsModeAc","cleanItemsToRemoveAc","removeFromList","params","useParams","useEffect","listId","document","name","style","backdrop_path","backgroundImage","originalImgPath","results","length","item","id","media_type","poster_path","vote_average","release_date","first_air_date","list","items","some","media_id","path","element","replace"],"mappings":"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","file":"static/js/3.a9676784.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { smallImgPath, toElementScroll, unavailable } from '../global/config';\r\n\r\nconst Card = ({ src, title, titleId,type, setType, score, clickHandler, date }) => {\r\n\tconst onClickHandler =()=>{\r\n\t\tif(clickHandler){ \r\n\t\t\tclickHandler()\r\n\t\t}\r\n\t\ttoElementScroll(false)\r\n\t}\r\n\treturn (\r\n\t\t<Link to={`/title/${type}/${titleId}`} className=\"card\" \r\n\t\t\tonClick={onClickHandler}\r\n\t\t>\r\n\t\t\t<div className=\"card__img\">\r\n\t\t\t\t<img src={ src ? (smallImgPath + src): unavailable} alt=\"\" />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"card__name\">{title}</div>\r\n\t\t\t<div className=\"card__score\">\r\n\t\t\t\t{score}\r\n\t\t\t</div>\r\n\t\t\t{date && <div className=\"card__date\">{date.substr(0, 4)}</div>}\r\n\t\t</Link>\r\n\t);\r\n};\r\n\r\nexport default Card;","import { toElementScroll } from \"../global/config\";\r\n\r\nconst Pagination = (props) => {\r\n\tconst setCurrentPage = (p) => {\r\n\t\tprops.setCurrentPage(p)\r\n\t\tif( props.setSearchResults){\r\n\t\t\tprops.setSearchResults(props.searchText ,p)\r\n\t\t\t\r\n\t\t}\r\n        if(props.setDiscoverData){\r\n\t\t\tprops.setDiscoverData(props.discover, p, props.activeGenres)\r\n\t\t}\r\n\t\t// props.getItems(p, props.itemsCount)\r\n\t\t// document.querySelector('section').scrollIntoView({ \r\n\t\t// \tbehavior: 'smooth', \r\n\t\t// \tblock: 'start' \r\n\t\t// })\r\n\t\ttoElementScroll(true)\r\n\t}\r\n\t// const props.pagesCount = Math.ceil(props.totalItemsCount / props.itemsCount)\r\n\tconst pages = []\r\n\tfor (let i = Math.max(props.currentPage - 2, 2); i <= Math.max(1, Math.min(props.currentPage + 2, props.pagesCount - 1)); i++) {\r\n\t\tpages.push(i);\r\n\t}\r\n\tconst toPrevPage = () => {\r\n\t\tif (props.currentPage - 1 > 0) {\r\n\t\t\treturn props.currentPage - 1\r\n\t\t} else {\r\n\t\t\treturn 0\r\n\t\t}\r\n\t}\r\n\tconst toNextPage = () => {\r\n\t\tif (props.currentPage + 1 <= props.pagesCount) {\r\n\t\t\treturn props.currentPage + 1\r\n\t\t} else {\r\n\t\t\treturn props.pagesCount + 1\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\tprops.pagesCount>1 &&\r\n\t\t<ul className=\"pagination\">\r\n\t\t\t{/* <li><span className={toPrevPage() < 1 ? 'arrow is-disabled' : 'arrow'} onClick={() => setCurrentPage(toPrevPage())}>{'<'}</span></li>\r\n\t\t\t<li><span className={props.currentPage === 1 && 'is-active'} onClick={() => setCurrentPage(1)}>{1}</span></li>\r\n\t\t\t{pages.map(pageNum => <li key={pageNum}><span className=props.currentPage === pageNum? 'is-active':''} onClick={() => setCurrentPage(pageNum)}>{pageNum}</span></li>)}\r\n\t\t\t<li><span className={props.currentPage === props.pagesCount && 'is-active'} onClick={() => setCurrentPage(props.pagesCount)}>{props.pagesCount}</span></li>\r\n\t\t\t<li><span className={toNextPage() <= props.pagesCount ? 'arrow' : 'arrow is-disabled'} onClick={() => setCurrentPage(toNextPage())}>{'>'}</span></li> */}\r\n\t\t\t<li><span className={toPrevPage() < 1 ? 'arrow is-disabled' : 'arrow'}  onClick={() => setCurrentPage(toPrevPage())}>{''}</span></li>\r\n\t\t\t<li><span className={props.currentPage === 1 ? 'is-active': ''} onClick={() => setCurrentPage(1)}>{1}</span></li>\r\n\t\t\t{pages.map(pageNum => <li key={pageNum}><span className={props.currentPage === pageNum? 'is-active':''} onClick={() => setCurrentPage(pageNum)}>{pageNum}</span></li>)}\r\n\t\t\t<li><span className={props.currentPage === props.pagesCount ?  'is-active': ''} onClick={() => setCurrentPage(props.pagesCount)}>{props.pagesCount}</span></li>\r\n\t\t\t<li><span  className={toNextPage() <= props.pagesCount ? 'arrow' : 'arrow is-disabled'} onClick={() => setCurrentPage(toNextPage())}>{''}</span></li>\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nexport default Pagination;","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport Card from '../components/Card';\r\nimport { originalImgPath, smallImgPath, unavailable } from '../global/config';\r\nimport { setDiscoverData, setTvPageActionCreator } from \"../redux/discover-reducer\";\r\nimport { setTypeActionCreator } from \"../redux/details-reducer\";\r\nimport { setListDetails, setItemsToRemoveAc, deleteItemsToRemoveAc, setRemoveItemsModeAc, cleanItemsToRemoveAc, removeFromList } from \"../redux/lists-reducer\";\r\nimport Pagination from '../components/Pagination';\r\nimport { Link, Navigate, Route, Routes, useParams } from 'react-router-dom';\r\nconst ListPage = ({ accessToken, listDetails, setListDetails, setItemsToRemoveAc, itemsToRemove, deleteItemsToRemoveAc, cleanItemsToRemoveAc, setRemoveItemsModeAc, removeItemsMode, removeFromList }) => {\r\n    const params = useParams()\r\n    const addToDataHandler = (type, id) => {\r\n        if (itemsToRemove.items.some(item => item.media_id === id && item.media_type === type)) {\r\n            deleteItemsToRemoveAc(type, id)\r\n        } else {\r\n            setItemsToRemoveAc(type, id)\r\n        }\r\n    }\r\n    const removeModeHandler = ()=>{\r\n        setRemoveItemsModeAc(false)\r\n        cleanItemsToRemoveAc()\r\n    }\r\n    const removeFromListHandler = ()=>{\r\n        removeFromList(params.listId, itemsToRemove)\r\n    }\r\n    useEffect(() => {\r\n        setListDetails(params.listId)\r\n    }, [])\r\n    useEffect(() => {\r\n        if (listDetails) {\r\n            document.title = listDetails.name\r\n        }\r\n    }, [listDetails])\r\n    if(!accessToken ){\r\n        return <Routes><Route path='*' element={ <Navigate to=\"/\" replace/>  } /></Routes>\r\n    }\r\n    return (\r\n        <>\r\n            {listDetails &&\r\n                <section className=\"list-section\" style={listDetails.backdrop_path && { backgroundImage: `url(${originalImgPath}${listDetails.backdrop_path})` }}>\r\n                    <div className=\"container-fluid\">\r\n                        <h2 className=\"title\">{listDetails.name}:</h2>\r\n                        {listDetails.results.length > 0 ?\r\n                            <>\r\n                                <div className=\"list-controls\">{!removeItemsMode ? <button className=\"btn\" onClick={() => setRemoveItemsModeAc(true)}>Удалить из списка</button> : <div> <p>Выберите фильмы, которые хотите удалить, потом нажмите на кнопку подтвердить</p> <div><button onClick={removeFromListHandler} className=\"btn\">Подтвердить</button> <button className=\"btn\" onClick={removeModeHandler}>Отмена</button></div></div>}</div>\r\n                                <div className=\"main-grid\">\r\n                                    {!removeItemsMode && listDetails && listDetails.results.map(item => { return <Card key={item.id} titleId={item.id} type={item.media_type} src={item.poster_path} title={item.title || item.name} score={item.vote_average} date={item.release_date || item.first_air_date}/> })}\r\n                                    {removeItemsMode && listDetails && listDetails.results.map(list => {\r\n                                        return <div key={list.id} onClick={() => addToDataHandler(list.media_type, list.id)} className={`card card_remove ${itemsToRemove.items.some(item => item.media_id === list.id && item.media_type === list.media_type) ? 'is-checked' : ''}`}>\r\n                                            <div className=\"card__img\">\r\n                                                <img src={list.poster_path ? (smallImgPath + list.poster_path) : unavailable} alt=\"\" />\r\n                                            </div>\r\n                                            <div className=\"card__name\">{list.title || list.name}</div>\r\n                                            <div className=\"card-controls\">\r\n                                                <div className=\"card-controls__add\">Добавить</div>\r\n                                                <div className=\"card-controls__added\"></div>\r\n                                            </div>\r\n                                            {(list.release_date) && <div className=\"card__date\">{list.release_date.substr(0, 4)}</div>}\r\n                                            {(list.first_air_date) && <div className=\"card__date\">{list.first_air_date.substr(0, 4)}</div>}\r\n                                        </div>\r\n                                    })}\r\n                                </div>\r\n                            </> :\r\n                            <div className=\"list-empty\">\r\n                                Этот список пуст\r\n                                <div>\r\n                                    <Link className=\"btn\" to=\"/lists\">Вернуться к спискам</Link>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </section>\r\n            }\r\n        </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        listDetails: state.lists.listDetails,\r\n        currentPage: state.lists.listPage,\r\n        lists: state.lists.lists,\r\n        itemsToRemove: state.lists.itemsToRemove,\r\n        removeItemsMode: state.lists.removeItemsMode,\r\n        accessToken: state.auth.accessToken,\r\n        // type: state.details.titleType,\r\n    }\r\n}\r\nexport default compose(\r\n    connect(mapStateToProps, { setDiscoverData, setListDetails, setItemsToRemoveAc, deleteItemsToRemoveAc, setRemoveItemsModeAc, cleanItemsToRemoveAc, removeFromList })\r\n)(ListPage)"],"sourceRoot":""}