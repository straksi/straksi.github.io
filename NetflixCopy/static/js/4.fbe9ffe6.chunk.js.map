{"version":3,"sources":["components/Card.js","components/Pagination.js","Pages/MoviePage.js"],"names":["Card","src","title","titleId","type","score","setType","clickHandler","to","className","onClick","toElementScroll","smallImgPath","unavailable","alt","Pagination","props","setCurrentPage","p","setSearchResults","searchText","setDiscoverData","discover","pages","i","Math","max","currentPage","min","pagesCount","push","toPrevPage","toNextPage","map","pageNum","compose","connect","state","moviesData","moviesPage","details","titleType","setTypeActionCreator","setMoviesPageActionCreator","withRouter","useEffect","document","results","item","id","poster_path","name","vote_average","total_pages"],"mappings":"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","file":"static/js/4.fbe9ffe6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { smallImgPath, toElementScroll, unavailable } from '../global/config';\r\n\r\nconst Card = ({ src, title, titleId,type, setType, score, clickHandler }) => {\r\n\tconst onClickHandler =()=>{\r\n\t\tif(clickHandler){ \r\n\t\t\tclickHandler()\r\n\t\t}\r\n\t\ttoElementScroll(false)\r\n\t}\r\n\treturn (\r\n\t\t<Link to={`/title/${type}/${titleId}`} className=\"card\" \r\n\t\t\tonClick={onClickHandler}\r\n\t\t>\r\n\t\t\t<div className=\"card__img\">\r\n\t\t\t\t<img src={ src ? (smallImgPath + src): unavailable} alt=\"\" />\r\n\t\t\t</div>\r\n\t\t\t<div className=\"card__name\">{title}</div>\r\n\t\t\t<div className=\"card__score\">\r\n\t\t\t\t{score}\r\n\t\t\t</div>\r\n\t\t</Link>\r\n\t);\r\n};\r\n\r\nexport default Card;","import { toElementScroll } from \"../global/config\";\r\n\r\nconst Pagination = (props) => {\r\n\tconst setCurrentPage = (p) => {\r\n\t\tprops.setCurrentPage(p)\r\n\t\tif( props.setSearchResults){\r\n\t\t\tprops.setSearchResults(props.searchText ,p)\r\n\t\t\t\r\n\t\t}\r\n        if(props.setDiscoverData){\r\n\t\t\tprops.setDiscoverData(props.discover, p)\r\n\t\t}\r\n\t\t// props.getItems(p, props.itemsCount)\r\n\t\t// document.querySelector('section').scrollIntoView({ \r\n\t\t// \tbehavior: 'smooth', \r\n\t\t// \tblock: 'start' \r\n\t\t// })\r\n\t\ttoElementScroll(true)\r\n\t}\r\n\t// const props.pagesCount = Math.ceil(props.totalItemsCount / props.itemsCount)\r\n\tconst pages = []\r\n\tfor (let i = Math.max(props.currentPage - 2, 2); i <= Math.max(1, Math.min(props.currentPage + 2, props.pagesCount - 1)); i++) {\r\n\t\tpages.push(i);\r\n\t}\r\n\tconst toPrevPage = () => {\r\n\t\tif (props.currentPage - 1 > 0) {\r\n\t\t\treturn props.currentPage - 1\r\n\t\t} else {\r\n\t\t\treturn 0\r\n\t\t}\r\n\t}\r\n\tconst toNextPage = () => {\r\n\t\tif (props.currentPage + 1 <= props.pagesCount) {\r\n\t\t\treturn props.currentPage + 1\r\n\t\t} else {\r\n\t\t\treturn props.pagesCount + 1\r\n\t\t}\r\n\t}\r\n\treturn (\r\n\t\tprops.pagesCount>1 &&\r\n\t\t<ul className=\"pagination\">\r\n\t\t\t{/* <li><span className={toPrevPage() < 1 ? 'arrow is-disabled' : 'arrow'} onClick={() => setCurrentPage(toPrevPage())}>{'<'}</span></li>\r\n\t\t\t<li><span className={props.currentPage === 1 && 'is-active'} onClick={() => setCurrentPage(1)}>{1}</span></li>\r\n\t\t\t{pages.map(pageNum => <li key={pageNum}><span className=props.currentPage === pageNum? 'is-active':''} onClick={() => setCurrentPage(pageNum)}>{pageNum}</span></li>)}\r\n\t\t\t<li><span className={props.currentPage === props.pagesCount && 'is-active'} onClick={() => setCurrentPage(props.pagesCount)}>{props.pagesCount}</span></li>\r\n\t\t\t<li><span className={toNextPage() <= props.pagesCount ? 'arrow' : 'arrow is-disabled'} onClick={() => setCurrentPage(toNextPage())}>{'>'}</span></li> */}\r\n\t\t\t<li><span className={toPrevPage() < 1 ? 'arrow is-disabled' : 'arrow'}  onClick={() => setCurrentPage(toPrevPage())}>{''}</span></li>\r\n\t\t\t<li><span className={props.currentPage === 1 ? 'is-active': ''} onClick={() => setCurrentPage(1)}>{1}</span></li>\r\n\t\t\t{pages.map(pageNum => <li key={pageNum}><span className={props.currentPage === pageNum? 'is-active':''} onClick={() => setCurrentPage(pageNum)}>{pageNum}</span></li>)}\r\n\t\t\t<li><span className={props.currentPage === props.pagesCount ?  'is-active': ''} onClick={() => setCurrentPage(props.pagesCount)}>{props.pagesCount}</span></li>\r\n\t\t\t<li><span  className={toNextPage() <= props.pagesCount ? 'arrow' : 'arrow is-disabled'} onClick={() => setCurrentPage(toNextPage())}>{''}</span></li>\r\n\t\t</ul>\r\n\t);\r\n};\r\n\r\nexport default Pagination;","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter,Redirect } from 'react-router';\r\nimport { compose } from 'redux';\r\nimport Card from '../components/Card';\r\nimport { originalImgPath } from '../global/config';\r\nimport { setDiscoverData, setMoviesPageActionCreator} from \"../redux/discover-reducer\";\r\nimport {setTypeActionCreator } from \"../redux/details-reducer\";\r\nimport Pagination from '../components/Pagination';\r\nconst MoviePage = ({moviesData, setDiscoverData, type, currentPage, setMoviesPageActionCreator}) => {\r\n\r\n    useEffect(()=>{\r\n        setDiscoverData('movie', currentPage)\r\n    },[currentPage])\r\n    useEffect(()=>{\r\n        document.title = 'Фильмы'\r\n    },[])\r\n    return (\r\n        <section>\r\n            <div className=\"container-fluid\">\r\n                <h2 className=\"title\">Фильмы</h2>\r\n                <div className=\"main-grid\">\r\n                    {moviesData && moviesData.results.map(item=> {return <Card key={item.id} titleId={item.id} setType={setTypeActionCreator} type={'movie'} src={item.poster_path} title={item.title || item.name} score={item.vote_average} />})}\r\n                </div>\r\n                {moviesData && <Pagination currentPage={currentPage} pagesCount={moviesData.total_pages} setDiscoverData={setDiscoverData} discover='movie' setCurrentPage={setMoviesPageActionCreator}/>}\r\n            </div>\r\n            \r\n        </section>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state)=>{\r\n    return{\r\n        moviesData: state.discover.moviesData,\r\n        currentPage: state.discover.moviesPage,\r\n        type: state.details.titleType,\r\n    }\r\n}\r\nexport default compose( \r\n    connect(mapStateToProps, {setDiscoverData, setTypeActionCreator, setMoviesPageActionCreator}),\r\n    withRouter,\r\n)(MoviePage)"],"sourceRoot":""}